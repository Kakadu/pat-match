; direct

(library
 (name work_base)
 (modules work_base)
 (preprocess
  (action
   (run %{project_root}/pp_ppx/ppx_rewriter.exe %{input-file}))))

(library
 (name work)
 (modules work)
 (preprocess
  (action
   (run %{project_root}/pp_ppx/ppx_rewriter.exe %{input-file})))
 (flags
  (-open Work_base))
 (libraries work_base))

(library
 (name work_base_common)
 (modules work_base_common)
 ;(preprocess  (pps OCanren-ppx.ppx_repr OCanren-ppx.ppx_fresh GT.ppx))
 (preprocess
  (action
   (run %{project_root}/pp_ppx/ppx_rewriter.exe %{input-file})))
 (flags (-rectypes))
 (libraries GT OCanren))

(rule
 (targets work_base_common.ml)
 (deps work_base.ml)
 (action
  (run noCanren -unnesting-mode -without-activate-tactics %{deps}  -o
    %{targets}))
 ; we expect that only types there so unesting and high-order will generate the same
 )

; high order

(library
 (name work_ho)
 (modules work_ho)
 (preprocess
  (action
   (run %{project_root}/pp_ppx/ppx_rewriter.exe %{input-file})))
 (flags
  (-rectypes -open Work_base_common))
 (libraries work_base work_base_common GT OCanren))

(rule
 (targets work_ho.ml)
 (deps work.ml)
 (action
  (run noCanren %{deps} -open Work_base -I .work_base.objs/byte  -o
    work_ho.ml)))

; unnesting

(library
 (name work_unn)
 (modules work_unn)
 (preprocess
  (action
   (run %{project_root}/pp_ppx/ppx_rewriter.exe %{input-file})))
 (flags
  (-rectypes -open Work_base_common))
 (libraries work_base GT OCanren work_base_common))

(rule
 (targets work_unn.ml)
 (deps work.ml)
 (action
  (run noCanren -unnesting-mode -without-activate-tactics %{deps} -open
    Work_base -I .work_base.objs/byte  -o work_unn.ml)))
