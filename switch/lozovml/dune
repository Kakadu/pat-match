; direct

(library
 (name work_base)
 (modules work_base)
 (libraries noCanren.List noCanren.Peano)
 (flags
  (:standard -rectypes)))

(library
 (name work)
 (modules work)
 (flags
  (:standard -open Work_base))
 (libraries work_base))

(library
 (name work_base_common)
 (modules work_base_common)
 ;(preprocess  (pps OCanren-ppx.ppx_repr OCanren-ppx.ppx_fresh GT.ppx))
 (preprocess
  (pps OCanren-ppx.ppx_fresh))
 (flags
  (:standard -rectypes -open OCanren.Std))
 (libraries GT OCanren))

(rule
 (targets work_base_common.ml)
 (deps work_base_common.raw)
 (mode
  (promote (until-clean)))
 (action
  (with-stdout-to
   %{targets}
   (run
    ocamlformat
    --impl
    --enable-outside-detected-project
    --profile=ocamlformat
    --margin=100
    %{deps}))))

(rule
 (targets work_base_common.raw)
 (deps
  work_base.ml
  (package noCanren))
 (action
  (run
   noCanren
   -unnesting-mode
   -without-activate-tactics
   -I
   `ocamlfind
   query
   noCanren.List`
   -I
   `ocamlfind
   query
   noCanren.Peano`
   -rectypes
   -new-ocanren
   %{deps}
   -w
   -8
   -o
   %{targets}))
 ; we expect that only types there so unesting and high-order will generate the same
 )

; high order

(library
 (name work_ho)
 (modules work_ho)
 (preprocess
  (pps OCanren-ppx.ppx_fresh))
 (flags
  (:standard -rectypes -open Work_base_common -open OCanren.Std))
 (libraries work_base work_base_common GT OCanren))

(rule
 (targets work_ho.ml)
 (deps work.ml)
 (action
  (run
   noCanren
   %{deps}
   -open
   Work_base
   -I
   .work_base.objs/byte
   -rectypes
   -w
   -8
   -o
   work_ho.ml)))

; unnesting

(library
 (name work_unn)
 (modules work_unn)
 (preprocess
  (pps OCanren-ppx.ppx_fresh))
 (flags
  (:standard -rectypes -open Work_base_common -open OCanren.Std))
 (libraries work_base GT OCanren work_base_common))

(rule
 (targets work_unn.ml)
 (deps work.ml)
 (action
  (run
   noCanren
   -unnesting-mode
   -without-activate-tactics
   -rectypes
   %{deps}
   -open
   Work_base
   -I
   .work_base.objs/byte
   -w
   -8
   -o
   work_unn.ml)))

(library
 (name tests)
 (modules tests)
 (libraries main_lib)
 (inline_tests)
 (flags
  (:standard -rectypes))
 (preprocess
  (pps OCanren-ppx.ppx_fresh ppx_expect)))
